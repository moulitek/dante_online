#!/bin/sh
make re > /dev/null

texte_failure_retvalue () { # take 3 argument : test name, good retvalue, retvalue got
        echo "[KO][retvalue] $1[/KO]"
        echo
        echo "[expected] $2[/expected]"
        echo
        echo "[got] $3[/got]"
        echo
        echo "_____________________________________"
        echo
}

texte_failure_timout () { # take 3 argument : test name, good time, time got
        echo "[KO][timeout] $1[/KO]"
        echo
        echo "[expected] $2[/expected]"
        echo
        echo "[got] $3[/got]"
        echo
        echo "_____________________________________"
        echo
}

texte_failure_badoutput () { # take 3 argument : test name, exepected, got
        echo "[KO][badoutput] $1[/badoutput]"
        echo
        echo "[expected] $2[/expected]"
        echo
        echo "[got] $3[/got]"
        echo
        echo "_____________________________________"
        echo
}

texte_success () { # take 1 argument : test name
        echo "[OK] $1[/OK]"
        echo
        echo "_____________________________________"
        echo
}

texte_success_time () { # take 1 argument : test name
        echo "[OK] $1 on $2s[/OK]"
        echo
        echo "_____________________________________"
        echo
}

texte_category_test () { # take 1 argument : category name
        echo "[#] $1[/#]"
        echo
}

texte_sequence_test () { # take 1 argument : sequence name
        echo "[##] $1 [/##]"
        echo
}
ret=0

test_expect_success () {
        DATE='/bin/date'
        BEFORE=$($DATE +'%s')
        ./generator/generator ${1} ${2} > res
        ret1=$?
        AFTER=$($DATE +'%s')
        ELAPSED=$(($AFTER - $BEFORE))

        if [ $ret1 != 0 ]
        then
            texte_failure_retvalue "$1 $2" 0 $ret1
            ret=84
        fi
        if [ $ret1 == 0 ]
        then
            texte_success "$1 $2" $ELAPSED
        fi
        rm res
}

test_expect_error () {
        ./generator/generator ${1} ${2} ${3} ${4} > res
        ret1=$?
        if [ $ret1 == 84 ]
        then
            texte_success "$1 $2 $3 $4"
        else
            texte_failure_retvalue "$1 $2 $3 $4" 84 $ret1
            ret=84
        fi
}

test_expect_error_res () {
        echo "    on test ${1} ${2}"
        ./solver/solver ${1} ${2}
        ret1=$(bash -c "echo $?")
        if [ $ret1 == 84 ]
        then
            texte_success "$1 $2 $3 $4"
        else
            texte_failure_retvalue "$1 $2 $3 $4" 84 $ret1
            ret=84
        fi
}

texte_sequence_test "GENERATION"
texte_category_test "time"
test_expect_success 2 2
test_expect_success 1 40
test_expect_success 40 1
test_expect_success 1 1
test_expect_success 10 10
test_expect_success 100 100
test_expect_success 1000 1000
test_expect_success 10000 10000
test_expect_success 20000 20000
test_expect_success 30000 30000
test_expect_success 40000 40000
test_expect_success 50000 50000

texte_category_test "error handling"

test_expect_error 0 2
test_expect_error 2 0
test_expect_error 2 -0
test_expect_error -2 0
test_expect_error 2 -2
test_expect_error "a" 2
test_expect_error 2 "a"
test_expect_error "z" 2
test_expect_error 2 "z"
test_expect_error "2Ab" 0
test_expect_error "A" 2
test_expect_error 2
test_expect_error
test_expect_error 2 2 "perfec"
test_expect_error 2 2 "poupiboup"
test_expect_error 2 2 "perfect" "notperfect"


texte_sequence_test "SOLVING"
texte_category_test "error handling"
search_dir="mouliVD/map/"
for entry in `ls $search_dir`; do
    mine="${search_dir}${entry}"
    test_expect_error_res $mine
done
test_expect_error_res "fake_file"
test_expect_error_res $mine "too many file"


texte_sequence_test "LOOPING"
texte_category_test "medium one"

i=0
while [ $i -lt 101 ]
do
    w=`echo $(($RANDOM%180+1))`
    h=`echo $(($RANDOM%50+1))`
    ./generator/generator $w $h > output.val
    ret1=$(bash -c "echo $?")
    ./solver/solver output.val > res.val
    ret2=$(bash -c "echo $?")
    if [ $ret2 != 0 ] || [ $ret1 != 0 ]
    then
        texte_failure_retvalue "loop [$i] $1 $2" 0 $ret1
        ret=84
    fi
    if [ $ret2 == 0 ] && [ $ret1 == 0 ]
    then
        texte_success "loop [$i] $w $h"
    fi

	i=`expr $i + 1`
	rm output.val
    rm res.val
done


texte_category_test "little one"

i=0
while [ $i -lt 101 ]
do
    w=`echo $(($RANDOM%10+1))`
    h=`echo $(($RANDOM%10+1))`
    ./generator/generator $w $h > output.val
    ret1=$(bash -c "echo $?")
    ./solver/solver output.val > res.val
    ret2=$(bash -c "echo $?")
    if [ $ret2 != 0 ] || [ $ret1 != 0 ]
    then
        texte_failure_retvalue "loop [$i] $w $h" 0 $ret1
        ret=84
    fi
    if [ $ret2 == 0 ] && [ $ret1 == 0 ]
    then
        texte_success "loop [$i] $w $h"
    fi
	i=`expr $i + 1`
	rm output.val
    rm res.val
done

make fclean > /dev/null
exit $ret
